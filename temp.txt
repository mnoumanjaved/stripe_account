This is the same OpenAI API rate limit error (HTTP 429). The workflow is consistently hitting rate limits even with retries. Here's what you need to do:
Root Cause Analysis
Your retry strategy (1s, 2s delays) is too aggressive for rate limit errors. When you hit a rate limit, you need to wait longer before retrying - not just a few seconds.
Immediate Action Items
1. Check Your OpenAI API Usage Dashboard

Go to https://platform.openai.com/usage
Check your current tier and limits
See if you're hitting requests per minute (RPM) or tokens per minute (TPM) limits

2. Update Your Retry Logic
In src/lib/blog-generation/utils/retry.ts:
typescriptexport async function retryOperation<T>(
  operation: () => Promise<T>,
  options: {
    maxRetries?: number;
    baseDelay?: number;
    maxDelay?: number;
    isRateLimitError?: boolean;
  } = {}
): Promise<T> {
  const {
    maxRetries = 3,
    baseDelay = 1000,
    maxDelay = 30000,
    isRateLimitError = false
  } = options;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      if (attempt === maxRetries) throw error;
      
      // For rate limits, use much longer delays
      const delay = isRateLimitError 
        ? Math.min(baseDelay * Math.pow(3, attempt), maxDelay) // 3s, 9s, 27s
        : Math.min(baseDelay * Math.pow(2, attempt), maxDelay); // 2s, 4s, 8s
      
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
}
3. Update AIService to Handle Rate Limits Better
In src/lib/blog-generation/services/ai.service.ts:
typescriptasync callOpenAI(/* params */) {
  try {
    const response = await this.openai.chat.completions.create({
      // your config
    });
    return response;
  } catch (error: any) {
    // Check if it's a rate limit error
    if (error?.status === 429) {
      const retryAfter = error?.headers?.['retry-after'];
      
      throw new RateLimitError(
        'Rate limit exceeded for OpenAI API',
        { retryAfter: retryAfter ? parseInt(retryAfter) : undefined }
      );
    }
    throw parseOpenAIError(error);
  }
}
4. Add Global Rate Limiting
Create a simple rate limiter to prevent multiple workflows from overwhelming the API:
typescript// src/lib/blog-generation/utils/rate-limiter.ts
class RateLimiter {
  private queue: Array<() => void> = [];
  private processing = false;
  private lastCallTime = 0;
  private minInterval = 2000; // 2 seconds between calls

  async throttle<T>(fn: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      this.queue.push(async () => {
        try {
          const result = await fn();
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
      
      this.processQueue();
    });
  }

  private async processQueue() {
    if (this.processing || this.queue.length === 0) return;
    
    this.processing = true;
    
    while (this.queue.length > 0) {
      const now = Date.now();
      const timeSinceLastCall = now - this.lastCallTime;
      
      if (timeSinceLastCall < this.minInterval) {
        await new Promise(resolve => 
          setTimeout(resolve, this.minInterval - timeSinceLastCall)
        );
      }
      
      const fn = this.queue.shift();
      if (fn) {
        this.lastCallTime = Date.now();
        await fn();
      }
    }
    
    this.processing = false;
  }
}

export const openAIRateLimiter = new RateLimiter();
Then wrap your OpenAI calls:
typescript// In AIService
async chooseTopic(keywords: string[]): Promise<string> {
  return openAIRateLimiter.throttle(() => this.callOpenAI(/* params */));
}
Quick Fix (Temporary)
If you need it working right now, just increase the delay values dramatically:
typescript// In your retry config
const delays = [10000, 30000, 60000]; // 10s, 30s, 60s
This gives the rate limit time to reset between attempts.
Long-term Solutions

Upgrade your OpenAI tier - This is the easiest fix
Implement request queuing with a job queue (Bull/BullMQ)
Add caching to reduce duplicate API calls
Use batch processing instead of real-time generation

error:
"[BlogGen] [WARN] chooseTopic failed (attempt 2/3), retrying in 2000ms { error: 'Rate limit exceeded for OpenAI API' }
[BlogGen] [INFO] Retrying chooseTopic (attempt 3/3) 
[BlogGen] [DEBUG] AI: Choosing topic from trending keywords 
[BlogGen] [ERROR] chooseTopic failed after max retries {
  message: 'Rate limit exceeded for OpenAI API',
  stack: 'BlogGenerationError: Rate limit exceeded for OpenAI API\n' +
    '    at new RateLimitError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:42:9)\n' +  
    '    at parseOpenAIError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:160:16)\n' +  
    '    at AIService.callOpenAI (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:246:89)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async eval (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:41:30)\n' +
    '    at async retryOperation (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/retry.ts:34:28)\n' +       
    '    at async BlogGenerationWorkflow.step2_ChooseTopic (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:120:35)\n' +
    '    at async BlogGenerationWorkflow.execute (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:43:35)',
  name: 'BlogGenerationError',
  code: 'RATE_LIMIT_ERROR',
  status: 429,
  details: { retryAfter: undefined },
  retryable: true
}
[Workflow: 02424a49] [ERROR] [choose-topic] Failed {
  message: 'Rate limit exceeded for OpenAI API',
  stack: 'BlogGenerationError: Rate limit exceeded for OpenAI API\n' +
    '    at new RateLimitError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:42:9)\n' +  
    '    at parseOpenAIError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:160:16)\n' +  
    '    at AIService.callOpenAI (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:246:89)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async eval (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:41:30)\n' +
    '    at async retryOperation (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/retry.ts:34:28)\n' +       
    '    at async BlogGenerationWorkflow.step2_ChooseTopic (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:120:35)\n' +
    '    at async BlogGenerationWorkflow.execute (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:43:35)',
  name: 'BlogGenerationError',
  code: 'RATE_LIMIT_ERROR',
  status: 429,
  details: { retryAfter: undefined },
  retryable: true
}
[Workflow: 02424a49] [ERROR] Workflow failed {
  message: 'Rate limit exceeded for OpenAI API',
  stack: 'BlogGenerationError: Rate limit exceeded for OpenAI API\n' +
    '    at new RateLimitError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:42:9)\n' +  
    '    at parseOpenAIError (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/error-handler.ts:160:16)\n' +  
    '    at AIService.callOpenAI (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:246:89)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async eval (webpack-internal:///(rsc)/./src/lib/blog-generation/services/ai.service.ts:41:30)\n' +
    '    at async retryOperation (webpack-internal:///(rsc)/./src/lib/blog-generation/utils/retry.ts:34:28)\n' +       
    '    at async BlogGenerationWorkflow.step2_ChooseTopic (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:120:35)\n' +
    '    at async BlogGenerationWorkflow.execute (webpack-internal:///(rsc)/./src/lib/blog-generation/workflows/blog-generation.workflow.ts:43:35)',
  name: 'BlogGenerationError',
  code: 'RATE_LIMIT_ERROR',
  status: 429,
  details: { retryAfter: undefined },
  retryable: true
}
‚ùå Blog generation failed {
  workflowId: '02424a49-9624-4af0-a682-c04d97ba6c2b',
  error: 'Rate limit exceeded for OpenAI API'
}"